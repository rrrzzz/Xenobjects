
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SplineMesh 
{
    /// <summary>
    /// Deform a mesh and place it along a spline, given various parameters.
    /// 
    /// This class intend to cover the most common situations of mesh bending. It can be used as-is in your project,
    /// or can serve as a source of inspiration to write your own procedural generator.
    /// </summary>
    [ExecuteAlways]
    [SelectionBase]
    [DisallowMultipleComponent]
    public class SplineMeshTiling : MonoBehaviour 
    {
        private GameObject generated;
        private Spline spline;
        private bool toUpdate;

        [Tooltip("Mesh to bend along the spline.")]
        public Mesh mesh;
        [Tooltip("Material to apply on the bent mesh.")]
        public Material material;
        [Tooltip("Translation to apply on the mesh before bending it.")]
        public Vector3 translation;
        [Tooltip("Rotation to apply on the mesh before bending it.")]
        public Vector3 rotation;
        [Tooltip("Scale to apply on the mesh before bending it.")]
        public Vector3 scale = Vector3.one;
        [Tooltip("If true, the mesh will be bent on play mode. If false, the bent mesh will be kept from the editor mode, allowing lighting baking.")]
        public bool updateInPlayMode;

        [Tooltip("If true, a mesh will be placed on each curve of the spline. If false, a single mesh will be placed for the whole spline.")]
        public bool curveSpace;

        [Tooltip("The mode to use to fill the chosen interval with the bent mesh.")]
        public MeshBender.FillingMode mode = MeshBender.FillingMode.StretchToInterval;

        private float _elapsedTime;
        
        public bool setClippingValues;
        public float coordinate;
        public float[] clippingValuesStart;
        public float[] clippingValuesEnd;
        public bool isInterpolatingClipping;
        public Material[] materials;
    
        private static readonly int ClipEnd = Shader.PropertyToID("_ClipEnd");
        public bool reassignMaterials;
        public bool isRealTime;
        private static readonly int ClipCoordinate = Shader.PropertyToID("_ClipCoordinate");

        public bool scaleToZero;
        public float scaleDuration;
        public bool resetScalingAndTime;
        public bool scaleToFull;
        public bool saveScales;
        public int nodesAffected;
        public float tThreshold = 0.2f;
        public bool resetMaterials;
        public bool interpolatePositionDir;
        
        private float _initialLength;
        private List<Vector2> _initialScales = new List<Vector2>();
        private Vector3 _nodeStartPos = new Vector3(3.985474f, 5.676583f, -11.20474f);
        private Vector3 _nodeEndPos = new Vector3(3.985474f, 5.676583f, -6.954725f);
        private Vector3 _nodeStartDir = new Vector3(3.921951f, 5.766486f, -10.64462f);
        private Vector3 _nodeEndDir = new Vector3(3.921951f, 5.766486f, -6.509478f);
        
        private void OnEnable() 
        {
            // tip : if you name all generated content in the same way, you can easily find all of it
            // at once in the scene view, with a single search.
            string generatedName = "generated by " + GetType().Name;
            var generatedTransform = transform.Find(generatedName);
            generated = generatedTransform ? generatedTransform.gameObject : UOUtility.Create(generatedName, gameObject);

            spline = GetComponentInParent<Spline>();
            spline.NodeListChanged += (_, _) => toUpdate = true;

            toUpdate = true;
            _initialScales.Clear();
            foreach (var n in spline.nodes)
            {
                if (Mathf.Approximately(n.Scale.x, 0))
                {
                    continue;
                }
                _initialScales.Add(n.Scale);
            }
            saveScales = false;
        }

        private void OnValidate() 
        {
            if (!spline) return;
            toUpdate = true;
        }

        private void Update() 
        {
            // we can prevent the generated content to be updated during playmode to preserve baked data saved in the scene
            // if (!updateInPlayMode && Application.isPlaying) return;
            if (saveScales || _initialScales.Count == 0)
            {
                _initialLength = spline.Length;
                _initialScales.Clear();
                foreach (var n in spline.nodes)
                {
                    _initialScales.Add(n.Scale);
                }
                saveScales = false;
            }
            if (toUpdate) {
                toUpdate = false;
                CreateMeshes();
            }

            if (resetScalingAndTime)
            {
                for (int i = 0; i < _initialScales.Count; i++)
                {
                    if (scaleToFull)
                    {
                        spline.nodes[i].Scale = Vector2.zero;
                        continue;
                    }
                    spline.nodes[i].Scale = _initialScales[i];
                }

                spline.Length = _initialLength;
                _elapsedTime = 0;
                resetScalingAndTime = false;
            }

            if (scaleToFull || scaleToZero)
            {
                ScaleTo();
            }

            if (interpolatePositionDir)
            {
                float t = _elapsedTime / scaleDuration;
                var node = spline.nodes[1];
                node.Position = Vector3.Lerp(_nodeStartPos, _nodeEndPos, t);
                node.Direction = Vector3.Lerp(_nodeStartDir, _nodeEndDir, t);
            }

            if (resetMaterials)
            {
                CreateMeshes();
                resetMaterials = false;
            }

            ProcessClipping();
        }

        private void ProcessClipping()
        {
            if (reassignMaterials)
            {
                var renderers = GetComponentsInChildren<MeshRenderer>();
                materials = renderers.Select(r => r.material).ToArray();
                reassignMaterials = false;
            }
        
            if (!setClippingValues && !isRealTime)
            {
                return;
            }
        
            for (int i = 0; i < clippingValuesStart.Length; i++)
            {
                if (i >= materials.Length)
                {
                    break;
                }

                if (isInterpolatingClipping)
                {
                    float t = _elapsedTime / scaleDuration;
                    var start = clippingValuesStart[i];
                    var end = clippingValuesEnd[i];
                    materials[i].SetFloat(ClipEnd, Mathf.Lerp(start, end, t));
                }
                else
                {
                    materials[i].SetFloat(ClipEnd, clippingValuesStart[i]);
                    materials[i].SetFloat(ClipCoordinate, coordinate);
                }
            }

            setClippingValues = false;
        }

        private void ScaleTo()
        {
            _elapsedTime += Time.deltaTime;

            var ts = new float[spline.nodes.Count];
                
            for (int i = 0; i < spline.nodes.Count; i++)
            {
                float t = _elapsedTime / scaleDuration;
                
                if (i > 0 && ts[i - 1] > tThreshold)
                {
                    t = ts[i - 1] - tThreshold;
                    ts[i] = t;
                }
                else if (i > 0 && ts[i - 1] < tThreshold)
                {
                    t = 0;
                }
                
                ts[i] = t;
                
                if (i >= nodesAffected)
                {
                    continue;
                }

                if (scaleToZero)
                {
                    spline.nodes[i].Scale = Vector2.Lerp(spline.nodes[i].Scale, Vector2.zero, t);
                }
                else
                {
                    spline.nodes[i].Scale = Vector2.Lerp(Vector2.zero, _initialScales[i], t);
                }
            }
        }

        private void CreateMeshes() 
        {
#if UNITY_EDITOR
            // we don't update if we are in prefab mode
            if (UnityEditor.SceneManagement.PrefabStageUtility.GetCurrentPrefabStage()) return;
#endif
            var used = new List<GameObject>();

            
            int i = 0;
            foreach (var curve in spline.curves) 
            {
                var go = FindOrCreate("segment " + i++ + " mesh");
                go.GetComponent<MeshBender>().SetInterval(curve);
                used.Add(go);
            }
            
            

            // we destroy the unused objects. This is classic pooling to recycle game objects.
            foreach (var go in generated.transform
                .Cast<Transform>()
                .Select(child => child.gameObject).Except(used).ToList()) 
            {
                UOUtility.Destroy(go);
            }
        }

        private GameObject FindOrCreate(string goName) 
        {
            var childTransform = generated.transform.Find(goName);
            GameObject res;
            if (!childTransform) 
            {
                res = UOUtility.Create(goName,
                    generated,
                    typeof(MeshFilter),
                    typeof(MeshRenderer),
                    typeof(MeshBender));
                res.isStatic = !updateInPlayMode;
            } 
            else 
            {
                res = childTransform.gameObject;
            }
            
            var meshRenderer = res.GetComponent<MeshRenderer>();
            if (!meshRenderer.material || resetMaterials)
            {
                meshRenderer.material = material;
            }
            else if (!meshRenderer.material.name.Contains(material.name))
            {
                meshRenderer.material = material;
            }
            
            MeshBender mb = res.GetComponent<MeshBender>();
           
            mb.Source = SourceMesh.Build(mesh)
                .Translate(translation)
                .Rotate(Quaternion.Euler(rotation))
                .Scale(scale);
            mb.Mode = mode;
            return res;
        }
    }
}
